JAVA INHERITENCE - In Java, it is possible to inherit attributes(data members defined in a class) and methods from one class to another, it is called Inheritence in Java and we group this inheritence concept into two categories:

1) Subclass(Child) - the class that inherits from another class	
2) Superclass(Parent) - the class being inherited from 

To inherit from a class, we use "extends" keyword.

For Example: 
class Animal {
	String name;
	public void eat() {
		System.out.println("I can eat");
	}
}

class Dog extends Animal {
	public void display() {
		System.out.println("My name is ": name);
	}
}

class Main {
	public static void main(String args[]) {
		Dog labrador = new Dog();
		labrador.name = "Rohu";
		labrador.display();
		labrador.eat();
	}
}

Output:
My name is Rohu
I can eat

-> In Java, Inheritance is an IS-A relationship. Means, we use inheritence only if there is an IS-A relationship between two classes. 

For Example:
Car is a Vehicle 
Orange is a Fruit
Surgeon is a Doctor
Dog is an Animal 

METHOD OVERRIDING IN JAVA INHERITENCE- When same method is present in both the superclass and subclass and we change the defination of method in subclass.

For Example:
class Animal {
	public void eat(){
		System.out.println("I can eat");
	}
}
class Dog extends Animal {
	public void eat() {
		System.out.println("I eat dog food");
	}
	
	public void bark() {
		System.out.println("I can bark");
	}
}

class Main {
	public static void main(String args[]){
		Dog labrador = new Dog();
		
		labrador.eat();
		labrador.bark();
	}
}

Why use Inheritence?
i) Code Reusability - The code present in parent class can be directly used by the child class.
ii) Method Overriding, also known as runtime polymorphism.

SUPER KEYWORD IN INHERITENCE - It is used to refer immediate parent class instance variable, method, constructor.

1) Super keyword used to refer immediate parent class instance variable.

class Animal {
	String color = "White";
}
class Dog extends Animal {
	String color = "Black";
	void printColor() {
		System.out.println(color);
		System.out.println(super.color);
	}
}
class Main {
	public static void main(String args[]){
		Dog labrador = new Dog();
		labrador.printColor();
	}
}

2) Super keyword can be used to invoke parent class method.

class Animal {
	void eat() {
		System.out.println("I can eat");
	}
}
class Dog extends Animal {
	void eat() {
		System.out.println("Eating...");
	}
	void test() {
		super.eat();
		eat();
	}
}
class Main {
	public static void main(String args[]) {
		Dog labrador = new Dog();
		labrador.test();
	}
}

3) Super keyword can be used to invoke parent class constructor.

class Animal {
	Animal() {
		System.out.println(" I can bite.");
	}
}

class Dog extends Animal {
	Dog() {
		System.out.println(" I am Dog.");
		super();
	}
}
class Main {
	public static void main(String args[]) {
		Dog labrador = new Dog();
	}
}

Note - super() is added in each class constructor automatically by compiler if there is no super() or this().

For Example:
class Animal { 
	Animal() {
		System.out.println("I can bite");
	}
}
class Dog extends Animal {
	Dog() {
		System.out.println("I am Dog");
	}
}
class Main {
	public static void main(String args[]) {
		Dog labrador = new Dog();
	}
}

Output:
I can bite
I am Dog

PROTECTED MEMBERS IN INHERITENCE - We can access protected attributes and methods from the child class.

For Example:
child Animal {
	protected String name;
	protected void display() {
		System.out.println("I am an Animal");
	}
}
child Dog extends Animal {
	public void getInfo() {
		System.out.println("My name is "+name);
	}
}
class Main {
	public static void main(String args[]){
		Dog labrador = new Dog();
		labrador.name = "Tommy";
		labrador.getInfo();
		labrador.display();
	}
}

FINAL KEYWORD - It is a non-access modifier used for classes, attributes, and methods, which makes them non-changeable(impossible to inherit or override).

For Example:
final class Vehicle {
	...
}
class Car extends Vehicle {
	...
}

Output:
Error

1) Final Variable - If you make any variable final, you cannot change its value(it will be a constant).
For Example:
class Bike {
	final int speedLimit = 90;
	void run() {
		speedLimit = 400;
	}
	public static void main(String args[]){
		Bike honda = new Bike();
		honda.run();
	}
}

Output:
Compilation Time Error

2) Final Method - If you make any method final, you cannot override it.
For Example:
class Bike {
	final void run() {
		System.out.println("Running");
	}
}
class Honda extends Bike {
	void run() {
		System.out.println("Running safely with 100kmph");
	}
	public static void main(String args[]) {
		Honda activa = new Honda();
		activa.run();
	}
}

Output:
Compile Time Error

3) Final Class - If you make any class final, you cannot extend it.
For Example:
final class Bike {
	...
}
class Honda extends Bike {
	void run() {
		System.out.println("Running safely with 100lmph");
	}
	public static void main(String args[]){
		Honda activa = new Honda();
		activa.run();
	}
}

Output:
Compile Time Error

Note - Final method can be inherited but cannot be overridden.

class Bike{  
  final void run() {
	System.out.println("running...");
  }  
}  
class Honda extends Bike{  
   public static void main(String args[]){  
	Honda activa = new Honda();
	activa.run();  
   }  
}

Note - Blank or Uninitialized Final Variable,
We can initialize this final variable inside a constructor only.

class Bike {
	final int speedlimit;  //blank or uninitialized final variable
	
	Bike() {
		speedlimit = 100;
		System.out.println(speedlimit);
	}
	public static void main(String args[]) {
		Bike suzuki = new Bike();
	}
}

Output:
100

Note - Final Parameter - If you declare any parameter as final, you cannot change its value.

class Bike {
	int cube(final int n) {
		n = n+2;    //cannot be changed
		n*n*n; 
	}
	public static void main(String args[]) {
		Bike honda = new Bike();
		honda.cube(5);
	}
}

Output:
Compile Time Error

Note - Can we declare a constructor final?
No, because constructor is never inherited.

TYPES OF INHERITENCE - 
